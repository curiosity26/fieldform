<?php
/**
* @file
* A description of what your module does.
*/

define('FIELDFORM_PROPERTY_STRING', 'string');
define('FIELDFORM_PROPERTY_TEXT', 'text');
define('FIELDFORM_PROPERTY_MARKUP', 'html_markup');
define('FIELDFORM_PROPERTY_SELECT', 'select');
define('FIELDFORM_PROPERTY_TABLE', 'table');
define('FIELDFORM_PROPERTY_RADIOS', 'radios');
define('FIELDFORM_PROPERTY_CHECKBOXES', 'checkboxes');
define('FIELDFORM_PROPERTY_BOOL', 'boolean');
define('FIELDFORM_PROPERTY_DATE', 'date');
define('FIELDFORM_PROPERTY_NONE', 'none');

module_load_include('inc', 'fieldform', 'entity/fieldform.class');
module_load_include('inc', 'fieldform', 'entity/fieldform.controller');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.class');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.controller');

function fieldform_hook_info() {
  return array(
    'fieldform_info' => array(
      'group' => 'fieldform'
    )
  );
}

function fieldform_entity_info() {
  $entities = array();
  $entities['fieldform'] = array(
    'label' => t('Field Form'),
    'plural label' => t('Field Forms'),
    'entity class' => 'FieldFormEntity',
    'controller class' => 'FieldFormController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_load',
    'entity keys' => array(
      'id' => 'fid',
      'name' => 'name',
      'label' => 'label'
    ),
    'base table' => 'fieldform',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'admin ui' => array(
      'path' => 'admin/structure/fieldform',
      'controller class' => 'FieldFormAdminUIController',
      'menu wildcard' => '%fieldform',
      'file' => 'fieldform.admin.inc',
      'file path' => drupal_get_path('module', 'fieldform').'/forms'
    ),
    'access callback' => 'fieldform_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'element_list' => array(
        'label' => t('Elements List'),
        'custom settings' => TRUE
      )
    )
  );

  $entities['fieldform_result'] = array(
    'label' => t('Field Form Result'),
    'plural label' => t('Field Form Results'),
    'entity class' => 'FieldFormResultEntity',
    'controller class' => 'FieldFormResultController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_result_load',
    'entity keys' => array(
      'id' => 'rid',
    ),
    'base table' => 'fieldform_result',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'access callback' => 'fieldform_result_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'print' => array(
        'label' => t('Print'),
        'custom settings' => TRUE
      )
    )
  );

  return $entities;
}

function fieldform_permission() {

  /* Admin */
  $perms['administer field forms'] = array(
    'title' => t('Administer Field Forms'),
    'description' => t('Full administrative privileges over all field forms'),
    'restrict access' => TRUE
  );

  /* Field Forms */

  $perms['create field forms'] = array(
    'title' => t('Create Field Forms'),
    'description' => t('Create different field forms in the system')
  );

  $perms['view field forms'] = array(
    'title' => t('View Application Forms'),
    'description' => t('View the different field forms in the system')
  );

  $perms['update field forms'] = array(
    'title' => t('Update Field Forms'),
    'description' => t('Edit the different field forms in the system')
  );

  $perms['delete field forms'] = array(
    'title' => t('Delete Field Forms'),
    'description' => t('Delete the different field forms in the system')
  );

  /* Field Form Results */

  $perms['view any field form results'] = array(
    'title' => t('View Any Field Form Results'),
    'description' => t('View any field form results')
  );

  $perms['print any field form results'] = array(
    'title' => t('Print Any Field Form Results'),
    'description' => t('Print any field form results')
  );

  $perms['delete any field form results'] = array(
    'title' => t('Delete Any Field Form Results'),
    'description' => t('Delete any field form results')
  );

  $perms['view own field form results'] = array(
    'title' => t('View Own Field Form Results'),
    'description' => t('View my field form results')
  );

  $perms['print own field form results'] = array(
    'title' => t('Print Own Field Form Results'),
    'description' => t('Print my field form results')
  );

  $perms['delete own field form results'] = array(
    'title' => t('Delete Own Field Form Results'),
    'description' => t('Delete my field form results')
  );

  return $perms;
}

function fieldform_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer career applications', $account)) {
    return TRUE;
  }

  return user_access($op.' field forms', $account);
}

function fieldform_result_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer field forms', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
    case 'print':
    case 'delete':
      return user_access($op.' any field form results', $account) ||
      (user_access($op.' own field form results', $account)
        && $account->uid === $entity->uid) ||
      user_access($op.' any '.$entity->type.' field form results', $account) ||
      (user_access($op.' own '.$entity->type.' field form results', $account)
        && $account->uid === $entity->uid);
      break;
  }

  return FALSE;
}

function fieldform_menu() {
  $menu = array();

  $menu['fieldform/namevalue-table/%/%'] = array(
    'title' => 'Fieldform AJAX Callback for Name Value Table',
    'page callback' => '_namevalue_table_ajax',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
  );

  return $menu;
}

function fieldform_get_info($elementType = NULL) {
  $static = &drupal_static(__FUNCTION__, array());

  if (empty($static) || (isset($elementType) && empty($static[$elementType]))) {

    $cache = cache_get('fieldform_info');
    $static = is_object($cache) ? $cache->data  : array();
    if (empty($static) || (!isset($elementType) && empty($static[$elementType]))) {
      $static = array();
      $default = array(
        'element class' => 'FieldFormElement',
        'element controller' => 'FieldFormElementController',
        'element ui' => array(
          'full' => array(
            'controller class' => 'FieldFormElementUIController',
            'file' => 'fieldform.ui.inc',
            'file path' => drupal_get_path('module', 'fieldform').'/forms'
          )
        ),
        'module' => 'fieldform',
        'properties' => array(
          'default_value' => array(
            'title' => t('Default Value'),
            'type' => FIELDFORM_PROPERTY_STRING
          )
        ),
      );

      foreach (module_implements('fieldform_info') as $module) {
        $hook = module_invoke($module, 'fieldform_info');
        foreach($hook as $type => &$info) {
          $info += $default;
          $info['type'] = $type;
        }
        $static += $hook;
      }
      drupal_alter('fieldform_info', $static);
    }

    cache_set('fieldform_info', $static);
  }

  if (!isset($elementType)) {
    foreach ($static as $info) {
      _fieldform_process_info_files($info);
    }
    return $static;
  }
  elseif (isset($elementType) && !empty($static[$elementType])) {
    _fieldform_process_info_files($static[$elementType]);
    return $static[$elementType];
  }

  return FALSE;
}

function _fieldform_process_info_files($info = array()) {
  static $files;
  if (empty($info)) {
    return FALSE;
  }

  if (isset($info['file'])) {
    $module = $info['module'];
    $file = $info['file'];
    $file_path = isset($info['file path']) ? $info['file path'] : drupal_get_path('module', $module);
    $path = DRUPAL_ROOT.DIRECTORY_SEPARATOR.$file_path.DIRECTORY_SEPARATOR.$file;
    if (file_exists($path) && !isset($files[$path])) {
      include_once $path;
      $files[$path] = TRUE;
    }
  }

  return TRUE;
}

function fieldform_element_controller($elementType) {
  $info = fieldform_get_info($elementType);
  return isset($info['element controller']) &&
  in_array('FieldFormElementControllerInterface', class_implements($info['element controller'])) ?
    new $info['element controller']($elementType) : new FieldFormElementController($elementType);
}

function fieldform_element_ui_controller($elementType, $view_mode = 'full') {
  $info = fieldform_get_info($elementType);
  _fieldform_process_info_files($info['element ui'][$view_mode]);
  return isset($info['element ui'][$view_mode]['controller']) &&
  in_array('FieldFormElementUIInterface', class_implements($info['element ui'][$view_mode]['controller class'])) ?
    new $info['element ui'][$view_mode]['controller class']($elementType) :
    new FieldFormElementUIController($elementType);
}

function element_get_from_elements($key, &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (array_key_exists($key, $elements)) {
    if (!in_array($key, $elements[$key]['parents'])) {
      $elements[$key]['parents'] = array($key);
    }
    return $elements[$key];
  }
  else {
    foreach ($elements as $name => &$element) {
      if (($found = element_get_from_elements($key, $element)) !== FALSE) {
        if (isset($found['parents']) && is_array($found['parents'])) {
          if (!in_array($name, $found['parents'])) {
            array_unshift($found['parents'], $name);
          }
        }
        else {
          $found['parents'] = array($name);
        }
        return $found;
      }
    }
  }

  return array();
}

function element_change_name($old_name, $new_name, &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (!empty($elements[$old_name])) {
    $elements[$new_name] = $elements[$old_name];
    unset($elements[$old_name]);
    return TRUE;
  }
  else {
    foreach ($elements as &$element) {
      if(element_change_name($old_name, $new_name, $element) === TRUE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

function elements_add(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element add callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element add callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'addElement')) {
    return $controller->addElement($entity, $element);
  }

  elements_add_element(get_object_vars($element), $entity->elements);
  return $entity;
}

function elements_add_element($element, &$elements) {
  if (!is_array($elements) || !isset($element->name)) {
    drupal_set_message(t('Unable to add nameless element or element to non-array'), 'error');
    return FALSE;
  }

  $name = implode('][', $element['parents']);

  $elements[$name] = $element;

  return $elements;
}

function elements_update(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element update callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element update callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'updateElement')) {
    return $controller->updateElement($entity, $element);
  }

  $values = get_object_vars($element);

  return element_update_values($element->name, $values, $entity->elements);
}

function element_update_values($key, $values, &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (!empty($elements[$key])) {
    foreach($values as $name => $value) {
      $elements[$key][$name] = $value;
    }
    return TRUE;
  }
  else {
    foreach ($elements as &$element) {
      if(element_update_values($key, $values, $element) === TRUE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

function elements_delete(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element delete callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element delete callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'deleteElement')) {
    return $controller->deleteElement($entity, $element);
  }

  return element_delete(get_object_vars($element), $entity->elements);
}

function element_delete($element, &$elements) {
  if (!is_array($elements) || !isset($element['name'])) {
    drupal_set_message(t('Unable to remove nameless element or element from non-array'), 'error');
    return FALSE;
  }

  $name = isset($element['parents']) ? implode('][', $element['parents']) : $element['name'];
  if (!empty($elements[$name])) {
    unset($elements[$name]);
    return TRUE;
  }

  return FALSE;
}

/* Load Functions */

function fieldform_load($id) {
  return entity_object_load($id, 'fieldform');
}

function fieldform_load_multiple($ids = FALSE) {
  return entity_load('fieldform', $ids);
}

function fieldform_result_load($id) {
  return entity_object_load($id, 'fieldform_result');
}

function fieldform_result_load_multiple($ids = FALSE) {
  return entity_load('fieldform_result', $ids);
}

function fieldform_element_create($elementType, $values = array()) {
  $element = fieldform_element_controller($elementType)->create($values);
  return ($element->name && $element->type && is_array($element->parents)) ?  $element : FALSE;
}

function fieldform_element_load($entity, $elementName) {
  if (!empty($entity->elements)) {
    $values = element_get_from_elements($elementName, $entity->elements);
    $values += array('name' => $elementName);
    return fieldform_element_create($values['type'], $values);
  }
  return array();
}

function fieldform_element_object_load($element, $entity) {
  $entity = fieldform_load($entity);
  $element = fieldform_element_load($entity, $element);
  return $element;
}

/* Forms */

function fieldform_forms($form_id, $args) {
  $forms = array();
  $info = fieldform_get_info();
  $entityInfo = entity_get_info();

  foreach ($info as $elementType => $element) {
    $forms['fieldform_'.$elementType.'_add_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_edit_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_delete_form'] = array(
      'callback' => 'fieldform_element_delete_form'
    );
  }

  foreach ($entityInfo as $type => $i) {
    if (isset($i['controller class'])) {
      $controller = new $i['controller class']($type);
      if (method_exists($controller, 'hookForms')) {
        $forms += $controller->hookForms();
      }
    }

  }

  return $forms;
}

function fieldform_element_info() {
  return array(
    'tableset' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_tableset_process'),
      '#header' => array(),
      '#rows' => array(),
      '#attributes' => array(),
      '#caption' => NULL,
      '#title_display' => 'before',
      '#theme' => 'tableset'
    ),
    'namevalue_table' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_namevalue_table_process'),
      '#options' => array(),
      '#header' => array(),
      '#attributes' => array(),
      '#caption' => NULL,
      '#title_display' => 'before',
      '#theme' => 'namevalue_table'
    )
  );
}

function fieldform_view_form($form, &$form_state, $entity_type, Entity $entity) {
  $controller = entity_get_controller($entity_type);
  return $controller::buildForm($entity, $form, $form_state);
}

function fieldform_view_form_validate(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $entity->validate($form, $form_state);
}

function fieldform_view_form_submit(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $entity->submit($form, $form_state);
}

function fieldform_view_wrapper($form, &$form_state, $entity_type, $entity) {
  $form_id = "fieldform_".$entity->entityType()."_".$entity->identifier()."_form";
  $form_state = array(
    'entity_type' => $entity->entityType(),
    'build_info' => array(
      'args' => array($entity->entityType(), $entity)
    )
  );

  $form_state[$entity_type] = $entity;

  return drupal_retrieve_form($form_id, $form_state);
}

function fieldform_element_operations_form($op = 'edit', Entity $entity, $element) {
  $form_id = $entity->entityType()."_".$element->elementType()."_{$op}_form";
  $form_state = array(
    'entity_type' => $entity->entityType(),
    'element_type' => $element->elementType(),
    'build_info' => array(
      'args' => array($entity->entityType(), $entity, $element->elementType(), $element, $op)
    )
  );

  if ($op == 'add' || $op == 'edit') {
    $form_state['wrapper_callback'] = 'fieldform_element_settings_defaults';
  }

  return drupal_build_form($form_id, $form_state);
}

function fieldform_element_settings_defaults($form, &$form_state, $entity_type, $entity,
                                             $element_type, FieldFormElement $element, $op = NULL) {
  $defaults = array(
    'entity_type' => $entity_type,
    'element_type' => $element_type
  );

  if (isset($op)) {
    $defaults['op'] = $op;
  }

  $form_state += $defaults;

  // Add in handlers pointing to the controller for the forms implemented by it.
  $form['#validate'][] = 'fieldform_element_settings_form_validate';
  $form['#submit'][] = 'fieldform_element_settings_form_submit';

  return $form;
}

function fieldform_element_settings_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element, $op = NULL) {
  $info = fieldform_get_info($element_type);
  $class = $info['element controller'];
  $form = $class::settingsForm($form, $form_state, $element, $op);
  $cancel_url = $entity->entityInfo()['admin ui']['path'].'/'.$entity->identifier().'/elements';

  drupal_set_title(ucwords($op.' '.$element_type));

  if (empty($form['submit'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#suffix' => l('cancel', check_url($cancel_url)),
      '#weight' => count(element_children($form))
    );
  }

  return $form;
}

function fieldform_element_settings_form_validate($form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $info = fieldform_get_info($element_type);
  $class = $info['element controller'];
  if (method_exists($class, 'settingsValidateForm')) {
    $class::settingsValidateForm($form, $form_state, $entity_type, $entity, $element_type, $element);
  }
}

function fieldform_element_settings_form_submit($form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $info = fieldform_get_info($element_type);
  $class = $info['element controller'];
  $form_state['redirect'] = $entity->entityInfo()['admin ui']['path'].'/manage/'.$entity->identifier().'/elements';
  $values = $form_state['input'];
  $values['type'] = $element_type;
  unset($values['form_id'], $values['form_build_id'], $values['form_build_token'], $values['op'], $values['class']);
  $name = isset($element->name) ? $element->name : $values['name'];
  if (($element = fieldform_element_create($element_type, $values)) !== FALSE) {
    if (method_exists($class, 'settingsSubmitForm')) {
      $class::settingsSubmitForm($form, $form_state, $entity_type, $entity, $element_type, $element);
    }

    if (!(elements_update($entity, $element))) {
      elements_add($entity, $element);
    }
    elseif ($element->name !== $name) {
      // Name has changed to protect the innocent (not really)
      element_change_name($name, $element->name, $entity->elements);
    }
    entity_save($entity_type, $entity);

    drupal_redirect_form($form_state);
  }
  else {
    drupal_set_message('Failed to create the element', 'error');
  }
}

function fieldform_element_delete_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element) {
  $question = t('Are you sure you want to delete @name from @entity',
    array('@name' => $element->title, '@entity' => $entity->label()));
  $cancel_url = $entity->entityInfo()['admin ui']['path'].'/'.$entity->identifier().'/elements';
  return confirm_form($form, $question, $cancel_url, t('Delete'));
}

function fieldform_element_delete_form_submit($form, &$form_state) {
  list($entity_type, $entity, ,$element) = $form_state['build_info']['args'];
  $form_state['redirect'] = $entity->entityInfo()['admin ui']['path'].'/'.$entity->identifier().'/elements';
  $element->name = str_replace('][', '', $element->name);
  if (elements_delete($entity, $element)) {
    entity_save($entity_type, $entity);
  }
  drupal_redirect_form($form_state);
}

function form_tableset_process($element, &$form_state, $complete_form) {
  foreach ($element['#rows'] as $key => &$row) {
    if (is_array($row)) {
      foreach ($row as &$col) {
        $default = array('#parents' => array_merge($element['#parents'], array($key)));
        if (!is_array($col)) {
          $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', $col));
          $default['#parents'][] = $name;
          $col['#data']  = array($name => array('#value' => $col)) + $default;
          drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
        }
        else {
          if (!empty($col['data'])) {
            $col['#data'] = $col['data'];
            unset($col['data']);
            if (is_array($col['#data'])) {
              $name = array_keys($col['#data'])[0];
              $default['#parents'][] = $name;
              $col['#data'][$name] += $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
            else {
              $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', (string)$col['#data']));
              $default['#parents'][] = $name;
              $col['#data'] = array($name => array('#markup' => $col['#data'])) +  $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
          }
          else {
            $col['#data'] = array();
            foreach(element_children($col) as $child) {
              $default['#parents'][] = $child;
              if (is_array($col[$child])) {
                $col['#data'][$child] = $col[$child] + $default;
                unset($col[$child]);
                drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$child], $form_state);
              }
            }
          }
        }
      }
    }
  }
  return $element;
}

function form_namevalue_table_process($element, &$form_state, $complete_form) {
  $options = !empty($element['#options']) ? array_filter($element['#options']) : array('' => '');
  unset($element['#options']);
  $options = array_filter($options,
    create_function('$value', 'return isset($value[\'name\']) && strlen($value[\'name\']) > 0;'));

  $element['#header'] = array(
    'Name',
    'Value',
    'Weight'
  );

  $element['#attributes'] = array('id' => 'namevalue_table-'.$element['#name']);
  $i = 0;

  foreach ($options as $name => $value) {
    if (is_numeric($name)) {
      $parents = $element['#parents'];
      $parents[] = $i;
      $element[$i] = _namevalue_table_blank_row();
      $element[$i]['name']['#default_value'] = $value['name'];
      $element[$i]['value']['#default_value'] = $value['value'];
      $element[$i]['weight']['#value'] = $value['weight'];
      foreach (element_children($element[$i]) as $child) {
        if (is_numeric($i)) {
          $element[$i][$child]['#parents'] = array_merge($parents, array($child));
        }
      }
      $i++;
    }
  }

  $element[++$i] = _namevalue_table_blank_row();

  $element['row_count'] = array(
    '#type' => 'hidden',
    '#value' => $i
  );

  $element['actions'] = array(
    '#type' => 'actions'
  );

  $element['actions']['save'] = array(
    '#type' => 'button',
    '#value' => 'Save',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/save/'.check_plain($element['#name']),
    )
  );

  $element['actions']['add'] = array(
    '#type' => 'button',
    '#value' => '+',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/add/'.check_plain($element['#name']),
    )
  );

  $element['actions']['remove'] = array(
    '#type' => 'button',
    '#value' => '-',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/remove/'.check_plain($element['#name'])
    )
  );

  return $element;
}

function _namevalue_table_blank_row() {
  return array(
    'name' => array(
      '#type' => 'textfield',
      '#title_display' => 'invisible',
    ),
    'value' => array(
      '#type' => 'textfield',
      '#title_display' => 'invisible',
    ),
    'weight' => array(
      '#type' => 'weight',
      '#value' => 0,
      '#attributes' => array(
        'class' => array('namevalue-weight')
      )
    )
  );
}

function form_extract_element($form, $name) {
  foreach (element_children($form) as $child) {
    if ($child === $name) {
      return $form[$name];
    }

    if (($element = form_extract_element($form[$child], $name)) !== FALSE) {
      return $element;
    }
  }

  return FALSE;
}

function _namevalue_table_ajax($op, $element_name) {
  list($form, $form_state) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  $element = form_extract_element($form, $element_name);
  unset($element['actions'], $element['#printed']);
  $count = $form_state['input'][$element_name]['row_count'];

  if ($op == 'add' || $op == 'remove') {
    $count = max($op == 'remove' ? $count - 1 : $count + 1, 1);
  }

  $values = $form_state['input'][$element_name];

  // Cleanse the Element
  foreach (element_children($element) as $branch) {
    if (is_numeric($branch)) {
      unset($element[$branch], $form_state['input'][$element_name][$branch]);
    }
    else {
      unset($values[$branch]);
    }
  }

  reset($values);
  for ($i = 0; $i < $count; $i++) {
    $element[$i] = _namevalue_table_blank_row();
    $element[$i]['weight']['#value'] = $i;
    $form_state['input'][$element_name][$i]['weight'] = $i;
    $value = current($values);
    foreach(element_children($element[$i]) as $name) {
      if ($name !== 'weight') {
        $element[$i][$name]['#value'] = isset($value[$name]) ? $value[$name] : '';
        $element[$i][$name]['#default_value'] = isset($value[$name]) ? $value[$name] : '';
        $form_state['input'][$element_name][$i][$name] = isset($value[$name]) ? $value[$name] : '';
      }
      $element[$i][$name]['#parents'] = array_merge($element['#parents'], array($i, $name));
      form_builder($form['#form_id'], $element[$i][$name], $form_state);
    }
    next($values);
  }

  uasort($elements, 'drupal_sort_weight');

  $element['row_count']['#value'] = $count;
  unset($element['row_count']['#printed']);

  if (!empty($element['#push_values'])) {
    reset($values);
    $commands = array(ajax_command_replace('#namevalue-table-wrapper-'.$element['#name'], drupal_render($element)));
    $arr = array();
    $values = array_filter($values,
      create_function('$value', 'return isset($value[\'name\']) && strlen($value[\'name\']) > 0;'));
    foreach ($values as $value) {
      $arr[$value['name']] = t($value['value']);
    }

    foreach($element['#push_values'] as $selector => $ops) {
      foreach ($ops as $op => $callbacks) {
        foreach ($callbacks as $callback) {
          $func = 'ajax_command_'.$op;
          $data = $callback($form, $form_state, $arr);
          $commands[] = $func($selector, $data);
        }
      }
    }
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  return $element;
}

function form_type_namevalue_table_value($element, $input = FALSE) {
  $final = array();
  $values = array();
  foreach (element_children($element) as $child) {
    if (is_numeric($child)) {
      $values = array($element[$child]['name'], $element[$child]['value'], $element[$child]['weight']);
    }
  }
  uasort($values, 'drupal_sort_weight');

  foreach($values as $value) {
      $final[$value['name']] = $value['value'];
  }

  return $final;
}

function form_ajax_options_change($form, $form_state, $values) {
  $data = $form['required']['#checked'] == TRUE ? array() : array('--' => t('None'));
  $data += $values;
  $form['default_value']['#options'] = $data;
  unset($form['default_value']['#printed']);
  return render($form['default_value']);
}

function form_ajax_required_toggle($form, $form_state) {
  $controller = fieldform_element_controller($form['default_value']['#type']);
  $commands = array();
  if (method_exists($controller, 'requiredToggle')) {
    $commands = $controller->requiredToggle($form, $form_state);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

function form_ajax_multiple_toggle($form, $form_state) {
  $controller = fieldform_element_controller($form['default_value']['#type']);
  $commands = array();
  if (method_exists($controller, 'multipleToggle')) {
    $commands = $controller->multipleToggle($form, $form_state);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/* Theme */

function fieldform_theme() {
  $themes = array();

  $themes['fieldform_elements_list'] = array(
    'render element' => 'form'
  );

  $themes['tableset'] = array(
    'render element' => 'element'
  );

  $themes['namevalue_table'] = array(
    'render element' => 'element'
  );

  return $themes;
}

function theme_fieldform_elements_list($variables) {
  $form = $variables['form'];
  $header = array(
    'Title',
    'Name',
    'Type',
    'Parents',
    'Weight',
    array(
      'data' => 'Operations',
      'colspan' => 2,
    )
  );

  $rows = array();

  foreach(element_children($form['elements']) as $name) {
    $element = $form['elements'][$name];
    $class = array('draggable');
    $class[] = !empty($element['parents']['#value']) ? 'tabledrag-leaf' : 'tabledrag-root';

    $indent = theme('indentation', array('size' => count($element['parents']['#value']) - 1));

    if ($name !== 'add_new_element') {
      $element['weight']['#attributes']['class'] = array('elements-list-weight');
      $element['parents']['#attributes']['class'] = array('elements-list-parents');

      $rows[] = array(
        'data' => array(
          $indent.drupal_render($element['title_label']).drupal_render($element['title']),
          drupal_render($element['name_label']).drupal_render($element['name']),
          drupal_render($element['type_label']).drupal_render($element['type']),
          drupal_render($element['parents']),
          drupal_render($element['weight']),
          drupal_render($element['operations']['edit']),
          drupal_render($element['operations']['delete'])
        ),
        'class' => $class
      );
    }
  }

  $form['elements']['add_new_element']['weight']['#attributes']['class'] = array('elements-list-weight');
  $form['elements']['add_new_element']['parents']['#attributes']['class'] = array('elements-list-parents');

  $rows[] = array(
    'data' => array(
      array('data' => drupal_render($form['elements']['add_new_element']['title']).
        drupal_render($form['elements']['add_new_element']['name']),
        'colspan' => '2'),
      drupal_render($form['elements']['add_new_element']['type']),
      drupal_render($form['elements']['add_new_element']['parents']),
      drupal_render($form['elements']['add_new_element']['weight']),
      '',
      '',
    ),
    'class' => array('draggable', 'tabledrag-root')
  );

  $table_id = 'elements_list_table';
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  //$output .= drupal_render_children($form);
  $output .= drupal_render($form['actions']).drupal_render($form['form_id']).drupal_render($form['form_token']).drupal_render($form['form_build_id']);
  drupal_add_tabledrag($table_id, 'match', 'parent', 'elements-list-parents', 'elements-list-parents',
    'elements-list-id');

  // Because we also want to sort in addition to providing parenting, we call
  // the drupal_add_tabledrag function again, instructing it to update the
  // weight field as items at the same level are re-ordered.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'elements-list-weight');

  return $output;
}

function theme_tableset($variables) {
  $element = $variables['element'];
    foreach($element['#rows'] as &$row) {
        if (isset($row['data'])) {
            $data = &$row['data'];
        }
        else {
            $data = &$row;
        }
        foreach($data as &$col) {
            $col['data'] = drupal_render($col['#data']);
            unset($col['#data']);
            if (!empty($col['#attributes'])) {
                $col += $col['#attributes'];
                unset($col['#attributes']);
            }
        }
    }
  $output = theme('table', array(
    'header' => $element['#header'],
    'rows' => $element['#rows'],
    'attributes' => $element['#attributes'],
    'caption' => $element['#caption']
    )
  );
  return theme('form_element', $element, $output);
}

function theme_namevalue_table($variables) {
  $element = $variables['element'];
  $rows = array();
  uasort($element, 'drupal_sort_weight');
  foreach(element_children($element) as $branch) {
    if (is_numeric($branch)) {
      $row = array('data' => array(),'class' => array('draggable', 'tabledrag-root'));
      foreach(element_children($element[$branch]) as $name) {
        $col = array(
          'data' => drupal_render($element[$branch][$name])
        );
        $row['data'][] = $col;
      }
      $rows[] = $row;
    }
  }

  $element = $variables['element'];
  $actions = $element['actions'];

  $table = theme('table', array(
      'header' => $element['#header'],
      'rows' => $rows,
      'attributes' => $element['#attributes'],
      'caption' => $element['#caption']
    )
  );

  //$element['#children'] = $table;

  $output = '<div id="namevalue-table-wrapper-'.$element['#name'].'">';
  //$output .= theme('form_element', array('element' => $element));
  $output .= theme('form_element_label', array('element' => $element));
  $output .= $table;
  $output .= drupal_render($element['row_count']);
  $output .= '</div>';
  $output .= drupal_render($actions);

  drupal_add_tabledrag($element['#attributes']['id'], 'order', 'sibling', 'namevalue-weight');

  return $output;
}
