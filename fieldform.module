<?php
/**
* @file
* A description of what your module does.
*/

define('FIELDFORM_PROPERTY_STRING', 'string');
define('FIELDFORM_PROPERTY_TEXT', 'text');
define('FIELDFORM_PROPERTY_MARKUP', 'html_markup');
define('FIELDFORM_PROPERTY_SELECT', 'select');
define('FIELDFORM_PROPERTY_TABLE', 'table');
define('FIELDFORM_PROPERTY_RADIOS', 'radios');
define('FIELDFORM_PROPERTY_CHECKBOXES', 'checkboxes');
define('FIELDFORM_PROPERTY_BOOL', 'boolean');
define('FIELDFORM_PROPERTY_DATE', 'date');
define('FIELDFORM_PROPERTY_NONE', 'none');

module_load_include('inc', 'fieldform', 'entity/fieldform.class');
module_load_include('inc', 'fieldform', 'entity/fieldform.controller');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.class');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.controller');
module_load_include('inc', 'fieldform', 'fieldform.field');

function fieldform_hook_info() {
  return array(
    'fieldform_info' => array(
      'group' => 'fieldform'
    ),
    'result_info' => array(
      'group' => 'fieldform'
    )
  );
}

function fieldform_entity_info() {
  $entities = array();
  $entities['fieldform'] = array(
    'label' => t('Field Form'),
    'plural label' => t('Field Forms'),
    'entity class' => 'FieldFormEntity',
    'controller class' => 'FieldFormController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_load',
    'entity keys' => array(
      'id' => 'fid',
      'name' => 'name',
      'label' => 'label'
    ),
    'base table' => 'fieldform',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'admin ui' => array(
      'path' => 'admin/structure/fieldform',
      'controller class' => 'FieldFormAdminUIController',
      'menu wildcard' => '%fieldform',
      'file' => 'fieldform.admin.inc',
      'file path' => drupal_get_path('module', 'fieldform').'/forms'
    ),
    'access callback' => 'fieldform_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'element_list' => array(
        'label' => t('Elements List'),
        'custom settings' => TRUE
      )
    )
  );

  $entities['fieldform_result'] = array(
    'label' => t('Field Form Result'),
    'plural label' => t('Field Form Results'),
    'entity class' => 'FieldFormResultEntity',
    'controller class' => 'FieldFormResultController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_result_load',
    'entity keys' => array(
      'id' => 'rid',
    ),
    'base table' => 'fieldform_result',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'access callback' => 'fieldform_result_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'print' => array(
        'label' => t('Print'),
        'custom settings' => TRUE
      )
    )
  );

  return $entities;
}

function fieldform_permission() {

  /* Admin */
  $perms['administer field forms'] = array(
    'title' => t('Administer Field Forms'),
    'description' => t('Full administrative privileges over all field forms'),
    'restrict access' => TRUE
  );

  /* Field Forms */

  $perms['create field forms'] = array(
    'title' => t('Create Field Forms'),
    'description' => t('Create different field forms in the system')
  );

  $perms['view field forms'] = array(
    'title' => t('View Field Forms'),
    'description' => t('View the different field forms in the system')
  );

  $perms['update field forms'] = array(
    'title' => t('Update Field Forms'),
    'description' => t('Edit the different field forms in the system')
  );

  $perms['delete field forms'] = array(
    'title' => t('Delete Field Forms'),
    'description' => t('Delete the different field forms in the system')
  );

  /* Field Form Results */

  $perms['view any field form results'] = array(
    'title' => t('View Any Field Form Results'),
    'description' => t('View any field form results')
  );

  $perms['edit any field form results'] = array(
    'title' => t('Edit Any Field Form Results'),
    'description' => t('Edit any field form results')
  );

  $perms['print any field form results'] = array(
    'title' => t('Print Any Field Form Results'),
    'description' => t('Print any field form results')
  );

  $perms['delete any field form results'] = array(
    'title' => t('Delete Any Field Form Results'),
    'description' => t('Delete any field form results')
  );

  $perms['view own field form results'] = array(
    'title' => t('View Own Field Form Results'),
    'description' => t('View my field form results')
  );

  $perms['edit own field form results'] = array(
    'title' => t('Edit Own Field Form Results'),
    'description' => t('Edit my field form results')
  );

  $perms['print own field form results'] = array(
    'title' => t('Print Own Field Form Results'),
    'description' => t('Print my field form results')
  );

  $perms['delete own field form results'] = array(
    'title' => t('Delete Own Field Form Results'),
    'description' => t('Delete my field form results')
  );

  return $perms;
}

function fieldform_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer field forms', $account)) {
    return TRUE;
  }

  return user_access($op.' field forms', $account);
}

function fieldform_result_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer field forms', $account)) {
    return TRUE;
  }

  if (user_access($op.' any field form results', $account)) {
    return TRUE;
  }

  if (user_access($op.' own field form results', $account)
      && $account->uid == $entity->uid) {
    if ($account->uid == 0) {
      return ($account->hostname == $entity->hostname);
    }
    return TRUE;
  }

  return FALSE;
}

function fieldform_field_result_access($op, $entity, $account = NULL) {
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }
  if ($account->uid === 1) {
    return TRUE;
  }

  $ret = (user_access($op.' any field form results', $account) || (user_access($op.' own field form results', $account)));

  return $ret;
}

/* Menu */

function fieldform_menu() {
  $menu = array();

  $menu['fieldform/namevalue-table/%/%'] = array(
    'title' => 'Fieldform AJAX Callback for Name Value Table',
    'page callback' => '_namevalue_table_ajax',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'access callback' => TRUE,
  );

  // Testing URL's
  $menu['fieldform/%fieldform'] = array(
    'title' => 'Fieldform',
    'page callback' => 'fieldform_view',
    'page arguments' => array(1, 'full', NULL, TRUE),
    'access callback' => 'fieldform_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK
  );

  foreach (fieldform_get_instances() as $instance) {
    $type = $instance['entity_type'];
    $menu[$type.'/%entity_object/results'] = array(
      'title' => 'Form Results',
      'load arguments' => array($type),
      'page callback' => 'fieldform_field_results_page',
      'page arguments' => array(1),
      'access callback' => 'fieldform_field_result_access',
      'access arguments' => array('view', 1),
      'type' => MENU_LOCAL_TASK
    );

    $menu[$type.'/%entity_object/results/export'] = array(
      'title' => 'Export Results',
      'load arguments' => array($type),
      'page callback' => 'fieldform_field_results_export_page',
      'page arguments' => array(1),
      'access callback' => 'fieldform_field_result_access',
      'access arguments' => array('view', 1),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 1
    );

    $menu[$type.'/%entity_object/results/clear'] = array(
      'title' => 'Clear All Results',
      'load arguments' => array($type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fieldform_field_clear_form', 1),
      'access callback' => 'fieldform_field_result_access',
      'access arguments' => array('delete', 1),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 2
    );

    $menu[$type.'/%entity_object/results/%fieldform_result/view'] = array(
      'title' => 'View Result',
      'load arguments' => array($type),
      'page callback' => 'fieldform_field_results_view_page',
      'page arguments' => array(1, 3),
      'access callback' => 'fieldform_result_access',
      'access arguments' => array('view', 3),
      'type' => MENU_CALLBACK
    );

    $menu[$type.'/%entity_object/results/%fieldform_result/edit'] = array(
      'title' => 'Edit Result',
      'load arguments' => array($type),
      'page callback' => 'fieldform_field_results_edit_page',
      'page arguments' => array(1, 3),
      'access callback' => 'fieldform_result_access',
      'access arguments' => array('edit', 3),
      'type' => MENU_CALLBACK
    );

    $menu[$type.'/%entity_object/results/%fieldform_result/print'] = array(
      'title' => 'Print Result',
      'load arguments' => array($type),
      'page callback' => 'fieldform_field_results_print_page',
      'page arguments' => array(1, 3),
      'access callback' => 'fieldform_result_access',
      'access arguments' => array('print', 3),
      'type' => MENU_CALLBACK,
      'delivery callback' => 'fieldform_print_page_delivery'
    );

    $menu[$type.'/%entity_object/results/%fieldform_result/delete'] = array(
      'title' => 'Delete Result',
      'load arguments' => array($type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fieldform_field_delete_form', 1, 3),
      'access callback' => 'fieldform_result_access',
      'access arguments' => array('delete', 3),
      'type' => MENU_CALLBACK
    );
  }

  return $menu;
}

function fieldform_get_instances($params = array()) {
  $fields = field_read_fields(array('type' => 'fieldform'));
  $instances = array();
  if (!empty($fields)) {
    $field_name = array(
      'field_name' => array_keys($fields)
    );
    $params = array_merge($field_name, $params);
    $instances = field_read_instances($params);
  }
  return $instances;
}

/* Fieldform Info Calls */

function fieldform_get_info($elementType = NULL) {
  $static = &drupal_static(__FUNCTION__, array());

  if (empty($static) || (isset($elementType) && empty($static[$elementType]))) {

    $cache = cache_get('fieldform_info');
    $static = is_object($cache) ? $cache->data  : array();
    if (empty($static) || (isset($elementType) && empty($static[$elementType]))) {
      $static = array();
      $default = array(
        'element class' => 'FieldFormElement',
        'element controller' => 'FieldFormElementController',
        'module' => 'fieldform',
        'properties' => array(
          'default_value' => array(
            'title' => t('Default Value'),
            'type' => FIELDFORM_PROPERTY_STRING
          )
        ),
        'has children' => FALSE
      );

      foreach (module_implements('fieldform_info') as $module) {
        $hook = module_invoke($module, 'fieldform_info');
        foreach($hook as $type => &$info) {
          $info += $default;
          $info['type'] = $type;
        }
        $static += $hook;
      }
      drupal_alter('fieldform_info', $static);
    }

    cache_set('fieldform_info', $static);
  }

  if (!isset($elementType)) {
    foreach ($static as $info) {
      _fieldform_process_info_files($info);
    }
    return $static;
  }
  elseif (isset($elementType) && !empty($static[$elementType])) {
    _fieldform_process_info_files($static[$elementType]);
    return $static[$elementType];
  }

  return FALSE;
}

function fieldform_result_get_info($resultType = NULL) {
  $static = &drupal_static(__FUNCTION__, array());

  if (empty($static) || (isset($resultType) && !isset($static[$resultType]))) {

    $cache = cache_get('result_info');
    $static = is_object($cache) ? $cache->data  : array();
    if (empty($static) || (!isset($resultType) && !isset($static[$resultType]))) {
      $static = array();
      $default = array(
        'result class' => 'FieldFormResultData',
        'result controller' => 'FieldFormResultDataController',
        'module' => 'fieldform',
      );

      foreach (module_implements('result_info') as $module) {
        $hook = module_invoke($module, 'result_info');
        foreach($hook as $type => &$info) {
          $info += $default;
          $info['type'] = $type;
        }
        $static += $hook;
      }
      drupal_alter('result_info', $static);
    }

    cache_set('result_info', $static);
  }

  if (!isset($resultType)) {
    foreach ($static as $info) {
      _fieldform_process_info_files($info);
    }
    return $static;
  }
  elseif (isset($resultType) && !empty($static[$resultType])) {
    _fieldform_process_info_files($static[$resultType]);
    return $static[$resultType];
  }

  return FALSE;
}

function _fieldform_process_info_files($info = array()) {
  static $files;
  if (empty($info)) {
    return FALSE;
  }

  if (isset($info['file'])) {
    $module = $info['module'];
    $file = $info['file'];
    $file_path = isset($info['file path']) ? $info['file path'] : drupal_get_path('module', $module);
    $path = DRUPAL_ROOT.DIRECTORY_SEPARATOR.$file_path.DIRECTORY_SEPARATOR.$file;
    if (file_exists($path) && !isset($files[$path])) {
      include_once $path;
      $files[$path] = TRUE;
    }
  }

  return TRUE;
}

function fieldform_element_controller($elementType) {
  $info = fieldform_get_info($elementType);
  return isset($info['element controller']) &&
  in_array('FieldFormElementControllerInterface', class_implements($info['element controller'])) ?
    new $info['element controller']($elementType) : new FieldFormElementController($elementType);
}

function fieldform_result_controller($resultType) {
  $info = fieldform_result_get_info($resultType);
  return isset($info['result controller']) &&
  in_array('FieldFormResultDataControllerInterface', class_implements($info['result controller'])) ?
    new $info['result controller']($resultType) : new FieldFormResultDataController($resultType);
}

/* Entity / Element CRUD */

function elements_add(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element add callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element add callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'addElement')) {
    return $controller->addElement($entity, $element);
  }
}

function elements_update(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element update callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element update callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'updateElement')) {
    return $controller->updateElement($entity, $element);
  }
}

function elements_delete(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element delete callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element delete callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'deleteElement')) {
    return $controller->deleteElement($entity, $element);
  }
}

/* Load Functions */

function fieldform_load($id) {
  return entity_object_load($id, 'fieldform');
}

function fieldform_load_multiple($ids = FALSE) {
  return entity_load('fieldform', $ids);
}

function fieldform_element_create($elementType, $values = array()) {
  $element = fieldform_element_controller($elementType)->create($values);
  return ($element->name && $element->type && is_array($element->parents)) ?  $element : FALSE;
}

function fieldform_element_load($entity, $elementName) {
  if (($element = $entity->findElementByName($elementName)) !== FALSE) {
    return $element;
  }
}

function fieldform_element_object_load($element, $entity) {
  $entity = fieldform_load($entity);
  $element = fieldform_element_load($entity, $element);
  return $element;
}

function fieldform_result_load($id) {
  return entity_object_load($id, 'fieldform_result');
}

function fieldform_result_load_multiple($ids = FALSE) {
  return entity_load('fieldform_result', $ids);
}

function fieldform_result_load_by_form($form_name) {
  $info = entity_get_info('fieldform_result');
  $id_key = $info['entity keys']['id'];
  $query = db_select('fieldform_result', 'fr')
    ->fields('fr', array($id_key))
    ->condition('form_name', $form_name);
  $results = $query->execute();
  $ids = $results->fetchAllAssoc($id_key);
  return fieldform_result_load_multiple($ids);
}

function fieldform_result_create($resultType, $values = array()) {
  $controller = fieldform_result_controller($resultType);
  return $controller->create($resultType, $values);
}

function fieldform_field_results_load($entity) {
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($entity->entityType(), $entity);
  }
  else {
    $type = 'node';
    $id = $entity->nid;
    $bundle = $entity->type;
  }

  $ids = db_select('fieldform_entities', 'fe')
    ->fields('fe', array('result'))
    ->condition('entity_type', $type)
    ->condition('entity', $id)
    ->condition('bundle', $bundle)
    ->execute()
    ->fetchAllAssoc('result');
  return fieldform_result_load_multiple(array_keys($ids));
}

/* View Functions */

function fieldform_view($entity, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $entities = is_array($entity) ? $entity : array($entity);
  drupal_set_title($entity->label());
  return entity_view('fieldform', $entities);
}

/* Save Functions */

function fieldform_field_result_save($entity_type, $entity, $bundle = NULL, $result) {
  if (method_exists($entity, 'entityType')) {
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($entity->entityType(), $entity);
  }
  else {
    $id = $entity->nid;
    $bundle = $entity->type;
  }

  $save = array();
  $save['entity_type'] = $entity_type;
  $save['entity'] = $id;
  $save['bundle'] = $bundle;
  $save['result'] = $result->identifier();

  $result = db_select('fieldform_entities', 'fe')
    ->fields('fe', array('id'))
    ->condition('result', $result->identifier())
    ->execute();
  if ($result->rowCount() < 1) {
    // Don't bother saving what's already saved
    db_insert('fieldform_entities')
      ->fields(array_keys($save), array_values($save))
      ->execute();
  }

  return $save;
}

/* Delete Functions */

function fieldform_field_result_delete($entity_type, $entity, $bundle = NULL, $result) {
  if (entity_delete($result->entityType(), $result->identifier()) !== FALSE) {
    if (method_exists($entity, 'entityType')) {
      $id = $entity->identifier();
      $type = $entity->entityType();
      list(, , $bundle) = entity_extract_ids($type, $entity);
    }
    else {
      $id = $entity->nid;
      $type = 'node';
      $bundle = $entity->type;
    }

    $ids = db_select('fieldform_entities', 'fe')
      ->fields('fe', array('id'))
      ->condition('entity_type', $type)
      ->condition('entity', $id)
      ->condition('bundle', $bundle)
      ->condition('result', $result->identifier())
      ->execute()
      ->fetchAllAssoc('id');

    return db_delete('fieldform_entities')
      ->condition('id', array_keys($ids))
      ->execute();
  }

  return FALSE;
}

/* Page Callbacks */

function fieldform_field_results_page($entity) {
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($entity->entityType(), $entity);
  }
  else {
    $type = 'node';
    $id = $entity->nid;
    $bundle = $entity->type;
  }

  $path = $type.'/'.$id;

  $fields = field_read_fields(
    array(
      'type' => 'fieldform',
      'entity_type' => $type,
      'bundle' => $bundle
    )
  );

  $header = array(
    'ID',
    'User',
    'Form Name',
    'Created',
    array(
      'data' => 'Operations',
      'colspan' => 4
    )
  );

  $rows = array();

  $field_names = array_keys($fields);
  foreach ($field_names as $field_name) {
    $items = field_get_items($type, $entity, $field_name);
    if (isset($items[0]['fieldform_form'])) {
      $results = fieldform_field_results_load($entity);
      foreach ($results as $result) {
        if (fieldform_result_access('view', $result)) {
          $user = user_load($result->uid);
          if (!$user->name) {
            $user->name = t('Anonymous');
          }

          $view_link = fieldform_result_access('view', $result) ?
            l('view', $path.'/results/'.$result->identifier().'/view', array('absolute' => TRUE)) : '';

          $edit_link = fieldform_result_access('edit', $result) ?
            l('edit', $path.'/results/'.$result->identifier().'/edit', array('absolute' => TRUE)) : '';

          $print_link = fieldform_result_access('print', $result) ?
            l('print', $path.'/results/'.$result->identifier().'/print',
              array('absolute' => TRUE, 'attributes' => array('target' => '_blank'))) : '';

          $delete_link = fieldform_result_access('print', $result) ?
            l('delete', $path.'/results/'.$result->identifier().'/delete', array('absolute' => TRUE)) : '';

          $rows[] = array(
            $result->identifier(),
            $user->name.' ('.$result->hostname.')',
            $result->form_name,
            format_date($result->created),
            $view_link,
            $edit_link,
            $print_link,
            $delete_link,
          );
        }
      }
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

function fieldform_field_results_view_page($entity, $result) {
  $title = method_exists($entity, 'label') ? $entity->label() : $entity->title;
  drupal_set_title(t('@title', array('@title' => $title)));
  $output = array();

  foreach ($result->data as $render) {
    $output[] = $render->render();
  }

  return $output;
}

function fieldform_field_results_edit_page($entity, $result) {
  $title = method_exists($entity, 'label') ? $entity->label() : $entity->title;
  drupal_set_title(t('Edit @title', array('@title' => $title)));
  $form_id = 'fieldform_'.$result->form_name.'_form';
  $fieldform = fieldform_load($result->form_name);
  $form_state = array(
    'build_info' => array(
      'args' => array($fieldform->entityType(), $fieldform)
    )
  );
  $form_state['result'] = $result;
  return drupal_build_form($form_id, $form_state);
}

function fieldform_field_results_print_page($entity, $result) {
  $fieldform = fieldform_load($result->form_name);

  $output = array(
    '#type' => 'page',
    '#theme' => 'fieldform_print_page',
    '#entity' => $entity,
    '#result' => $result,
    '#fieldform' => $fieldform,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'fieldform').'/css/print-page.css')
    )
  );

  return $output;
}

function fieldform_print_page_delivery($page_callback_result) {
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  if (is_int($page_callback_result)) {
    drupal_deliver_html_page($page_callback_result);
  }
  else {
    // Process attached won't attach page attachments.
    drupal_process_attached($page_callback_result);
    print drupal_render_page($page_callback_result);
    // Perform end-of-request tasks.
    drupal_page_footer();
  }
}

function fieldform_field_results_export_page($entity) {
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($entity->entityType(), $entity);
  }
  else {
    $type = 'node';
    $id = $entity->nid;
    $bundle = $entity->type;
  }
  $filename = check_plain($type.'_'.$bundle.'_'.$id.'_form_results.csv');
  drupal_add_http_header('Content-Type', 'text/csv; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename='.$filename);

  $results = fieldform_field_results_load($entity);
  $result = current($results);
  if ($result && fieldform_result_access('view', $result)) {
    $i = 0;
    print 'ID,Form Name,User,Hostname,Created,Updated,';

    foreach ($result->data as $data) {
      $e = ($i < count($result->data) - 1) ? ',' : PHP_EOL;
      print str_replace(array("\r", "\n", '"', ','), array("\rR", "\rN", "\rQ", "\rC"), $data->title).$e;
      $i++;
    }
    reset($result->data);
    while ($result) {
      if (fieldform_result_access('view', $result)) {
        $i = 0;
        $user = user_load($result->uid);
        if (!$user->name) {
          $user->name = t('Anonymous');
        }
        print $result->identifier().','.$result->form_name.','.$user->name.','.$result->hostname.',';
        print str_replace(array("\r", "\n", '"', ','),
            array("\rR", "\rN", "\rQ", "\rC"), format_date($result->created, 'custom', 'm-d-Y h:i:s')).',';
        print str_replace(array("\r", "\n", '"', ','),
            array("\rR", "\rN", "\rQ", "\rC"), format_date($result->changed, 'custom', 'm-d-Y h:i:s')).',';
        foreach ($result->data as $data) {
          $e = ($i < count($result->data) - 1) ? ',' : PHP_EOL;
          $value = is_array($data->value()) ? implode(',', $data->value()) : $data->value();
          print str_replace(array("\r", "\n", '"', ','), array("\rR", "\rN", "\rQ", "\rC"), $value).$e;
          $i++;
        }
      }
      $result = next($results);
    }
  }
  drupal_exit();
}

function fieldform_field_clear_form($form, &$form_state, $entity) {
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
  }
  else {
    $type = 'node';
    $id = $entity->nid;
  }
  $form_state['entity'] = $entity;
  $form_state['results'] = fieldform_field_results_load($entity);
  $question = t('Are you sure you want to delete the form results from %type: %id',
    array('%type' => $type, '%id' => $id));
  return confirm_form($form, $question, $type.'/'.$id.'/results');
}

function fieldform_field_clear_form_submit($form, &$form_state) {
  $results = $form_state['results'];
  $entity = $form_state['entity'];

  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($type, $entity);
  }
  else {
    $type = 'node';
    $id = $entity->nid;
    $bundle = $entity->type;
  }

  foreach ($results as $result) {
    if (fieldform_field_result_delete($type, $entity, $bundle, $result) === FALSE) {
      drupal_set_message(t('Failed to delete result'), 'error');
    }
  }

  $form_state['redirect'] = $type.'/'.$id.'/results';
  drupal_redirect_form($form_state);
}

function fieldform_field_delete_form($form, &$form_state, $entity, $result) {
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
  }
  else {
    $type = 'node';
    $id = $entity->nid;
  }
  $form_state['entity'] = $entity;
  $form_state['result'] = $result;
  $user = user_load($result->uid);
  $question = t('Are you sure you want to delete the form result for %user',
    array('%user' => $user->name.'('.$result->hostname.')'));
  return confirm_form($form, $question, $type.'/'.$id.'/results');
}

function fieldform_field_delete_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];
  $result = $form_state['result'];
  if (method_exists($entity, 'entityType')) {
    $type = $entity->entityType();
    $id = $entity->identifier();
    list(, , $bundle) = entity_extract_ids($type, $entity);
  }
  else {
    $type = 'node';
    $id = $entity->nid;
    $bundle = $entity->type;
  }
  if (fieldform_field_result_delete($type, $entity, $bundle, $result) === FALSE) {
    drupal_set_message(t('Failed to delete result'), 'error');
  }

  $form_state['redirect'] = $type.'/'.$id.'/results';
  drupal_redirect_form($form_state);
}

/* Forms */

function fieldform_forms($form_id, $args) {
  $forms = array();
  $info = fieldform_get_info();
  $entityInfo = entity_get_info();

  $forms['fieldform_view_form'] = array(
    'wrapper callback' => 'fieldform_view_wrapper'
  );

  foreach ($info as $elementType => $element) {
    $forms['fieldform_'.$elementType.'_add_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_edit_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_delete_form'] = array(
      'callback' => 'fieldform_element_delete_form'
    );
  }

  foreach ($entityInfo as $type => $i) {
    if (isset($i['controller class'])) {
      $controller = entity_get_controller($type);
      if (method_exists($controller, 'hookForms')) {
        $forms += $controller::hookForms();
      }
    }
  }

  return $forms;
}

function fieldform_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['entity_type']) && isset($form_state[$form_state['entity_type']])
    && isset($form_state['field_entity'])) {
    $entity = $form_state[$form_state['entity_type']];
    if ($form_id === 'fieldform_'.$entity->identifier().'_form'
      && !in_array('_fieldform_field_form_submit', $form['#submit'])) {
      $form['#submit'][] = '_fieldform_field_form_submit';
    }
  }
}

function fieldform_element_info() {
  return array(
    'tableset' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_tableset_process'),
      '#header' => array(),
      '#rows' => array(),
      '#attributes' => array(),
      '#caption' => NULL,
      '#title_display' => 'before',
      '#theme' => 'tableset'
    ),
    'namevalue_table' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_namevalue_table_process'),
      '#options' => array(),
      '#header' => array(),
      '#attributes' => array(),
      '#caption' => NULL,
      '#title_display' => 'before',
      '#theme' => 'namevalue_table'
    )
  );
}

function fieldform_view_form($form, &$form_state, $entity_type, Entity $entity) {
  $controller = entity_get_controller($entity_type);
  $result = isset($form_state['result']) ? $form_state['result'] : entity_create('fieldform_result', array(
    'uid' => $GLOBALS['user']->uid,
    'hostname' => $GLOBALS['user']->hostname
  ));

  $form = $controller::buildForm($entity, $form, $form_state);

  $result_controller = entity_get_controller($result->entityType());
  $result_controller::buildForm($result, $entity, $form, $form_state);
  $form_state['result'] = $result;
  return $form;
}

function fieldform_view_form_validate(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $entity->validate($form, $form_state);
}

function fieldform_view_form_submit(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $result = &$form_state['result'];
  $result_controller = entity_get_controller($result->entityType());
  $result_controller::buildResult($result, $entity, $form, $form_state);
  $entity->submit($form, $form_state);
  entity_save($result->entityType(), $result);
  $form_state['result'] = $result;
}

function _fieldform_field_form_submit($form, &$form_state) {
  $result = $form_state['result'];
  $entity = $form_state['field_entity'];
  if (isset($entity)) {
    if (method_exists($entity, 'entityType')) {
      $entity_type = $entity->entityType();
      list(, , $bundle) = entity_extract_ids($entity_type, $entity);
    }
    else {
      $entity_type = 'node';
      $bundle = $entity->type;
    }
    fieldform_field_result_save($entity_type, $entity, $bundle, $result);
  }
}

function fieldform_element_operations_form($op = 'edit', Entity $entity, FieldFormElementInterface $element) {
  $form_id = $entity->entityType()."_".$element->elementType()."_{$op}_form";
  $form_state = array(
    'entity_type' => $entity->entityType(),
    'element_type' => $element->elementType(),
    'build_info' => array(
      'args' => array($entity->entityType(), $entity, $element->elementType(), $element, $op)
    )
  );

  if ($op == 'add' || $op == 'edit') {
    $form_state['wrapper_callback'] = 'fieldform_element_settings_defaults';
  }

  return drupal_build_form($form_id, $form_state);
}

function fieldform_element_settings_defaults($form, &$form_state, $entity_type, $entity,
                                             $element_type, FieldFormElementInterface $element, $op = NULL) {
  $defaults = array(
    'entity_type' => $entity_type,
    'element_type' => $element_type
  );

  if (isset($op)) {
    $defaults['op'] = $op;
  }

  $form_state += $defaults;

  // Add in handlers pointing to the controller for the forms implemented by it.
  $form['#validate'] = array('fieldform_element_settings_form_validate');
  $form['#submit'] = array('fieldform_element_settings_form_submit');

  return $form;
}

function fieldform_element_settings_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element, $op = NULL) {

  $class = $element->elementInfo()['element controller'];
  $form = $class::settingsForm($form, $form_state, $element, $op);
  $cancel_url = $entity->entityInfo()['admin ui']['path'].'/manage/'.$entity->identifier().'/elements';

  drupal_set_title(ucwords($op.' '.$element->title.' '.$element_type));

  if (empty($form['submit'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#suffix' => l('cancel', check_url($cancel_url)),
      '#weight' => count(element_children($form))
    );
  }

  return $form;
}

function fieldform_element_settings_form_validate($form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $class = $element->elementInfo()['element controller'];
  $class::settingsValidateForm($form, $form_state, $entity_type, $entity, $element_type, $element);
}

function fieldform_element_settings_form_submit($form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $class = $element->elementInfo()['element controller'];
  $form_state['redirect'] = $entity->entityInfo()['admin ui']['path'].'/manage/'.$entity->identifier().'/elements';

  $class::settingsSubmitForm($form, $form_state, $entity_type, $entity, $element_type, $element);

  $values = $form_state['values'];

  if (isset($values['attributes'])) {
    $values['attributes'] = $values['attributes']['values'];
  }

  unset($values['type'], $values['name'], $values['form_id'], $values['form_build_id'],
    $values['form_token'], $values['op'], $values['class'], $values['submit']);

  $element->updateElement($values);

  elements_update($entity, $element);
  entity_save($entity_type, $entity);
  drupal_redirect_form($form_state);
}

function fieldform_element_delete_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element) {
  $question = t('Are you sure you want to delete @name from @entity',
    array('@name' => $element->title, '@entity' => $entity->label()));
  $cancel_url = $entity->entityInfo()['admin ui']['path'].'/'.$entity->identifier().'/elements';
  return confirm_form($form, $question, $cancel_url, t('Delete'));
}

function fieldform_element_delete_form_submit($form, &$form_state) {
  list($entity_type, $entity, ,$element) = $form_state['build_info']['args'];
  $form_state['redirect'] = $entity->entityInfo()['admin ui']['path'].'/manage/'.$entity->identifier().'/elements';
  if (elements_delete($entity, $element)) {
    entity_save($entity_type, $entity);
  }
  drupal_redirect_form($form_state);
}

function form_tableset_process($element, &$form_state, $complete_form) {
  foreach ($element['#rows'] as $key => &$row) {
    if (is_array($row)) {
      foreach ($row as &$col) {
        $default = array('#parents' => array_merge($element['#parents'], array($key)));
        if (!is_array($col)) {
          $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', $col));
          $default['#parents'][] = $name;
          $col['#data']  = array($name => array('#value' => $col)) + $default;
          drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
        }
        else {
          if (!empty($col['data'])) {
            $col['#data'] = $col['data'];
            unset($col['data']);
            if (is_array($col['#data'])) {
              $name = array_keys($col['#data'])[0];
              $default['#parents'][] = $name;
              $col['#data'][$name] += $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
            else {
              $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', (string)$col['#data']));
              $default['#parents'][] = $name;
              $col['#data'] = array($name => array('#markup' => $col['#data'])) +  $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
          }
          else {
            $col['#data'] = array();
            foreach(element_children($col) as $child) {
              $default['#parents'][] = $child;
              if (is_array($col[$child])) {
                $col['#data'][$child] = $col[$child] + $default;
                unset($col[$child]);
                drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$child], $form_state);
              }
            }
          }
        }
      }
    }
  }
  return $element;
}

function namevalue_sort_weight($a, $b) {
  $a_weight = (is_array($a) && isset($a['weight']['#value'])) ? $a['weight']['#value'] : 0;
  $b_weight = (is_array($b) && isset($b['weight']['#value'])) ? $b['weight']['#value'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

function form_namevalue_table_process($element, &$form_state, $complete_form) {
  $options = array();
  if (!empty($element['#options']) && !empty($element['#options']['values'])) {
    $options = array_filter($element['#options']['values']);
  }
  elseif (!empty($element['#options'])) {
    $options = array_filter($element['#options']);
  }

  unset($element['#options']);
  $element['#header'] = array(
    'Name',
    'Value',
    'Weight'
  );

  $element['#attributes'] = array('id' => 'namevalue_table-'.$element['#name']);
  $i = 0;

  foreach ($options as $name => $value) {
    $parents = $element['#parents'];
    $parents[] = $i;
    $element[$i] = _namevalue_table_blank_row();
    $element[$i]['name']['#default_value'] = $name;
    $element[$i]['value']['#default_value'] = $value;
    $element[$i]['weight']['#value'] = $i;
    foreach (element_children($element[$i]) as $child) {
      $element[$i][$child]['#needs_validation'] = FALSE;
      $element[$i][$child]['#parents'] = array_merge($parents, array($child));
    }
    $i++;
  }

  $element[++$i] = _namevalue_table_blank_row();
  $element[$i]['weight']['#value'] = $i;

  uasort($element, 'namevalue_sort_weight');

  $element['row_count'] = array(
    '#type' => 'hidden',
    '#value' => $i
  );

  $element['actions'] = array(
    '#type' => 'actions'
  );

  $name_parameter = check_plain(implode('][', $element['#array_parents']));

  $element['actions']['save'] = array(
    '#type' => 'button',
    '#value' => 'Save',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/save/'.$name_parameter
    )
  );

  $element['actions']['add'] = array(
    '#type' => 'button',
    '#value' => '+',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/add/'.$name_parameter
    )
  );

  $element['actions']['remove'] = array(
    '#type' => 'button',
    '#value' => '-',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'path' => 'fieldform/namevalue-table/remove/'.$name_parameter
    )
  );

  return $element;
}

function _namevalue_table_blank_row() {
  return array(
    'name' => array(
      '#type' => 'textfield',
      '#title_display' => 'invisible',
    ),
    'value' => array(
      '#type' => 'textfield',
      '#title_display' => 'invisible',
    ),
    'weight' => array(
      '#type' => 'weight',
      '#value' => 0,
      '#attributes' => array(
        'class' => array('namevalue-weight')
      )
    )
  );
}

function _namevalue_table_ajax($op, $element_name) {
  list($form, $form_state) = ajax_get_form();
  drupal_process_form($form['#form_id'], $form, $form_state);
  $parents = explode('][', $element_name);
  $element = drupal_array_get_nested_value($form, $parents);
  if (isset($form_state['complete_form'])) {
    $completed_form_element = drupal_array_get_nested_value($form_state['complete_form'], $parents);
    unset($completed_form_element);
  }

  unset($element['actions'], $element['#printed']);

  $count = drupal_array_get_nested_value($form_state['input'], $element['row_count']['#parents']);
  if ($op == 'add' || $op == 'remove') {
    $count = max($op == 'remove' ? $count - 1 : $count + 1, 1);
  }
  $form_values = &drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $values = isset($form_values['values']) ? array_filter($form_values['values']) : array_filter($form_values);
  // Cleanse the Element
  foreach (element_children($element) as $branch) {
    if (is_numeric($branch)) {
      unset($element[$branch], $form_values[$branch]);
    }
  }

  reset($values);

  $element['row_count']['#value'] = $count;
  unset($element['row_count']['#printed']);

  $data = array();

  for ($i = 0; $i < $count; $i++) {
    $current = current($values);
    $value = array('name' => array_search($current, $values), 'value' => $current);
    $data[$i] = _namevalue_table_blank_row();
    $data[$i]['weight']['#value'] = $i;
    foreach(element_children($data[$i]) as $name) {
      if ($name !== 'weight') {
        $data[$i][$name]['#value'] = isset($value[$name]) ? $value[$name] : '';
        $data[$i][$name]['#default_value'] = isset($value[$name]) ? $value[$name] : '';
      }
      $data[$i][$name]['#needs_validation'] = FALSE;
      $data[$i][$name]['#parents'] = array_merge($element['#parents'], array($i, $name));
      form_builder($form['#form_id'], $data[$i][$name], $form_state);
    }
    next($values);
  }

  $element += $data;

  if (!empty($element['#push_values'])) {
    $commands = array(ajax_command_replace('#namevalue-table-wrapper-'.$element['#name'], render($element)));
    reset($values);
    foreach($element['#push_values'] as $selector => $ops) {
      foreach ($ops as $op => $callbacks) {
        foreach ($callbacks as $callback) {
          $func = 'ajax_command_'.$op;
          $ret = $callback($form, $form_state, $values);
          $commands[] = $func($selector, $ret);
        }
      }
    }
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  return $element;
}

function form_type_namevalue_table_value(&$element, $input = FALSE) {
  $final = array();
  $dups = array();

  if ($input !== FALSE) {
    unset($input['row_count']);
    uasort($input, 'drupal_sort_weight');
    foreach ($input as $value) {
      if (in_array($value['name'], array_keys($final))) {
        $dups[$value['name']] = isset($dups[$value['name']]) ? $dups[$value['name']]++ : 1;
        $value['name'] .= '_'.$dups[$value['name']];
      }
      $final[$value['name']] = $value['value'];
    }
    $final = array_filter($final);
  }

  return array('values' => $final);
}

function form_ajax_options_change($form, $form_state, $values) {
  $controller = fieldform_element_controller($form['default_value']['#type']);

  if (method_exists($controller, 'optionsChange')) {
    $data =  $controller->optionsChange($form, $form_state, $values);
    return $data;
  }

  return '';
}

function form_ajax_required_toggle($form, $form_state) {
  $controller = fieldform_element_controller($form['default_value']['#type']);
  $commands = array();
  if (method_exists($controller, 'requiredToggle')) {
    $commands = $controller->requiredToggle($form, $form_state);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

function form_ajax_multiple_toggle($form, $form_state) {
  $controller = fieldform_element_controller($form['default_value']['#type']);
  $commands = array();
  if (method_exists($controller, 'multipleToggle')) {
    $commands = $controller->multipleToggle($form, $form_state);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

/* Theme */

function fieldform_theme() {
  $themes = array();

  $themes['fieldform_elements_list'] = array(
    'render element' => 'form'
  );

  $themes['tableset'] = array(
    'render element' => 'element'
  );

  $themes['namevalue_table'] = array(
    'render element' => 'element'
  );

  $themes['fieldform_result'] = array(
    'render element' => 'element',
    'template' => 'fieldform_result',
    'path' => drupal_get_path('module', 'fieldform').'/templates'
  );

  $themes['fieldform_print_page'] = array(
    'render element' => 'page',
    'template' => 'fieldform_print_page',
    'path' => drupal_get_path('module', 'fieldform').'/templates'
  );

  return $themes;
}

function theme_fieldform_elements_list($variables) {
  $form = $variables['form'];
  $info = fieldform_get_info();

  $rows = array();

  foreach(element_children($form['elements']) as $name) {
    $element = $form['elements'][$name];
    $class = array('draggable');
    $class[] = !empty($element['type']) && isset($element['type']['#value']) &&
      isset($info[$element['type']['#value']]['has children']) &&
      $info[$element['type']['#value']]['has children'] === TRUE ? 'tabledrag' : 'tabledrag-leaf';

    $size = isset($element['depth']) ? $element['depth']['#value'] : 0;
    $indent = theme('indentation', array('size' => $size));
    unset($element['depth']);

    if ($name !== 'add_new_element') {
      $element['id']['#attributes']['class'] = array('elements-list-id');
      $element['weight']['#attributes']['class'] = array('elements-list-weight');
      $element['parent']['#attributes']['class'] = array('elements-list-parents');

      $rows[] = array(
        'data' => array(
          $indent.drupal_render($element['title_label']).drupal_render($element['title']),
          drupal_render($element['parent']),
          drupal_render($element['weight']),
          drupal_render($element['name_label']).drupal_render($element['name']),
          drupal_render($element['type_label']).drupal_render($element['type']).drupal_render($element['id']),
          drupal_render($element['operations']['edit']),
          drupal_render($element['operations']['delete'])
        ),
        'class' => $class
      );
    }
  }
  $form['elements']['add_new_element']['id']['#attributes']['class'] = array('elements-list-id');
  $form['elements']['add_new_element']['weight']['#attributes']['class'] = array('elements-list-weight');
  $form['elements']['add_new_element']['parents']['#attributes']['class'] = array('elements-list-parents');

  if (empty($rows)) {
    $add_row = array(
      drupal_render($form['elements']['add_new_element']['title']).
      drupal_render($form['elements']['add_new_element']['name']),
      drupal_render($form['elements']['add_new_element']['parent']),
      drupal_render($form['elements']['add_new_element']['weight']),
      '',
      drupal_render($form['elements']['add_new_element']['type']).
      drupal_render($form['elements']['add_new_element']['id']),
      ''
    );
    $header = array(
      array(
        'data' => 'Title',
        'colspan' => 2
      ),
      '',
      'Name',
      'Type',
      'Operations'
    );
  }
  else {
    $add_row = array(
      array('data' =>
        drupal_render($form['elements']['add_new_element']['title']).
        drupal_render($form['elements']['add_new_element']['name']),
        'colspan' => '2'
      ),
      drupal_render($form['elements']['add_new_element']['parent']),
      drupal_render($form['elements']['add_new_element']['weight']),
      drupal_render($form['elements']['add_new_element']['type']).
      drupal_render($form['elements']['add_new_element']['id']),
      '',
      ''
    );
    $header = array(
      'Title',
      '',
      '',
      'Name',
      'Type',
      array(
        'data' => 'Operations',
        'colspan' => 2,
      )
    );
  }

  $rows[] = array(
    'data' => $add_row,
    'class' => array('draggable', 'tabledrag-leaf', 'add-new-element')
  );

  $table_id = 'elements_list_table';
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));

  $output .= drupal_render($form['actions']).drupal_render($form['form_id']).drupal_render($form['form_token']).drupal_render($form['form_build_id']);
  drupal_add_tabledrag($table_id, 'match', 'parent', 'elements-list-parents', 'elements-list-parents',
    'elements-list-id');

  // Because we also want to sort in addition to providing parenting, we call
  // the drupal_add_tabledrag function again, instructing it to update the
  // weight field as items at the same level are re-ordered.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'elements-list-weight');

  return $output;
}

function theme_tableset($variables) {
  $element = $variables['element'];
    foreach($element['#rows'] as &$row) {
        if (isset($row['data'])) {
            $data = &$row['data'];
        }
        else {
            $data = &$row;
        }
        foreach($data as &$col) {
            $col['data'] = drupal_render($col['#data']);
            unset($col['#data']);
            if (!empty($col['#attributes'])) {
                $col += $col['#attributes'];
                unset($col['#attributes']);
            }
        }
    }
  $output = theme('table', array(
    'header' => $element['#header'],
    'rows' => $element['#rows'],
    'attributes' => $element['#attributes'],
    'caption' => $element['#caption']
    )
  );
  return theme('form_element', $element, $output);
}

function theme_namevalue_table($variables) {
  $element = $variables['element'];
  $rows = array();
  $data = array();
  foreach(element_children($element) as $branch) {
    if (is_numeric($branch)) {
      $data[] = $element[$branch];
    }
  }

  uasort($data, 'namevalue_sort_weight');

  foreach ($data as $branch) {
    $row = array('data' => array(),'class' => array('draggable', 'tabledrag-root'));
    foreach(element_children($branch) as $name) {
      $col = array(
        'data' => drupal_render($branch[$name])
      );
      $row['data'][] = $col;
    }
    $rows[] = $row;
  }

  $element = $variables['element'];
  $actions = $element['actions'];

  $table = theme('table', array(
      'header' => $element['#header'],
      'rows' => $rows,
      'attributes' => $element['#attributes'],
      'caption' => $element['#caption']
    )
  );

  $output = '<div id="namevalue-table-wrapper-'.$element['#name'].'">';
  $output .= theme('form_element_label', array('element' => $element));
  $output .= $table;
  $output .= drupal_render($element['row_count']);
  $output .= '</div>';
  $output .= drupal_render($actions);

  drupal_add_tabledrag($element['#attributes']['id'], 'order', 'sibling', 'namevalue-weight');

  return $output;
}

function template_preprocess_fieldform_result(&$vars) {
  $result = $vars['element']['#result'];
  $vars['result'] = $result;

  $vars['title_display'] = isset($vars['element']['#title_display']) ? $vars['element']['#title_display'] : 'before';
  $vars['title_attributes_array']['class'][] = 'label';

  switch($vars['title_display']) {
    case 'inline':
      $vars['title_attributes_array']['class'][] = 'inline';
      break;
    case 'hidden':
      $vars['title_attributes_array']['class'][] = 'element-invisible';
      break;
  }
  $vars['title'] = $vars['element']['#title'];

  $data = $result->data();

  $vars['classes_array'][] = 'fieldform-result';
  $vars['classes_array'][] = 'fieldform-result-'.$data['type'];
  $vars['classes_array'][] = 'fieldform-result-'.$data['name'];

  $vars['content_attributes_array']['class'][] = 'content';

  $value = $result->value();
  if (is_array($value)) {
    $items = array('items' => $value);
    if ($vars['title_display'] == 'inline') {
      $items =+ array(
        'class' => 'inline'
      );
    }
    $vars['content'] = theme('item_list', $items);
  }
  else {
    $vars['content'] = $value;
  }

  if ($suggestions = theme_get_suggestions(array($data['type'], $data['name']), 'fieldform_result')) {
    $vars['theme_hook_suggestions'] = $suggestions;
  }

}

function template_preprocess_fieldform_print_page(&$vars) {
  $elements = $vars['page'];
  $entity = $elements['#entity'];
  $result = $elements['#result'];
  $form = $elements['#fieldform'];

  $vars['logo'] = ($logo = theme_get_setting('logo')) && isset($logo) ? theme('image', array('path' => $logo)) : '';
  $vars['language'] = $GLOBALS['language'];
  $vars['language']->dir = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $vars['site_name'] = (theme_get_setting('toggle_name') ? filter_xss_admin(variable_get('site_name', 'Drupal')) : '');
  $vars['site_slogan'] = (theme_get_setting('toggle_slogan') ? filter_xss_admin(variable_get('site_slogan', '')) : '');
  $vars['title'] = method_exists($entity, 'label') ? $entity->label() : $entity->title;

  $vars['page']['results'] = array();
  if(isset($elements['#attributes']) && is_array($elements['#attributes'])) {
    $vars['attributes_array'] = array_merge($vars['attributes_array'], $elements['#attributes']);
  }

  unset($vars['page']['#post_render']);

  foreach ($result->data as $render) {
    $vars['results'][$render->name] = $render->render();
  }

  $vars['classes_array'][] = 'fieldform-result-'.$result->identifier();

  $params = arg();
  $params[] = $result->identifier();

  if (!!$form) {
    array_unshift($params, $form->identifier());
    $vars['classes_array'][] = 'fieldform-form-'.$form->identifier();
  }

  if ($suggestions = theme_get_suggestions($params, 'fieldform_result_page')) {
    $vars['theme_hook_suggestions'] = $suggestions;
  }
}