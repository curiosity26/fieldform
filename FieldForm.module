<?php
/**
* @file
* A description of what your module does.
*/

define('FIELDFORM_PROPERTY_STRING', 'string');
define('FIELDFORM_PROPERTY_TEXT', 'text');
define('FIELDFORM_PROPERTY_MARKUP', 'html_markup');
define('FIELDFORM_PROPERTY_SELECT', 'select');
define('FIELDFORM_PROPERTY_TABLE', 'table');
define('FIELDFORM_PROPERTY_RADIOS', 'radios');
define('FIELDFORM_PROPERTY_CHECKBOXES', 'checkboxes');
define('FIELDFORM_PROPERTY_BOOL', 'boolean');
define('FIELDFORM_PROPERTY_DATE', 'date');
define('FIELDFORM_PROPERTY_NONE', 'none');

module_load_include('inc', 'fieldform', 'entity/fieldform.class');
module_load_include('inc', 'fieldform', 'entity/fieldform.controller');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.class');
module_load_include('inc', 'fieldform', 'entity/fieldformresult.controller');

function fieldform_hook_info() {
  return array(
    'fieldform' => array(
      'group' => 'fieldform'
    )
  );
}

function fieldform_entity_info() {
  $entities = array();
  $entities['fieldform'] = array(
    'label' => t('Field Form'),
    'plural label' => t('Field Forms'),
    'entity class' => 'FieldFormEntity',
    'controller class' => 'FieldFormController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_load',
    'entity keys' => array(
      'id' => 'fid',
      'name' => 'name',
      'label' => 'label'
    ),
    'base table' => 'fieldform',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'admin ui' => array(
      'path' => 'admin/structure/fieldform',
      'controller class' => 'FieldFormUIController',
      'file' => 'fieldform.admin.inc',
      'file path' => drupal_get_path('module', 'fieldform').'/forms'
    ),
    'access callback' => 'fieldform_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'element_list' => array(
        'label' => t('Elements List'),
        'custom settings' => TRUE
      )
    )
  );

  $entities['fieldform_result'] = array(
    'label' => t('Field Form Result'),
    'plural label' => t('Field Form Results'),
    'entity class' => 'FieldFormResultEntity',
    'controller class' => 'FieldFormResultController',
    'module' => 'fieldform',
    'load callback' => 'fieldform_result_load',
    'entity keys' => array(
      'id' => 'rid',
    ),
    'base table' => 'fieldform_result',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'access callback' => 'fieldform_result_access',
    'view modes' => array(
      'full' => array(
        'label' => t('Full View'),
        'custom settings' => FALSE
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE
      ),
      'print' => array(
        'label' => t('Print'),
        'custom settings' => TRUE
      )
    )
  );

  return $entities;
}

function fieldform_permission() {

  /* Admin */
  $perms['administer field forms'] = array(
    'title' => t('Administer Field Forms'),
    'description' => t('Full administrative privileges over all field forms'),
    'restrict access' => TRUE
  );

  /* Field Forms */

  $perms['create field forms'] = array(
    'title' => t('Create Field Forms'),
    'description' => t('Create different field forms in the system')
  );

  $perms['view field forms'] = array(
    'title' => t('View Application Forms'),
    'description' => t('View the different field forms in the system')
  );

  $perms['update field forms'] = array(
    'title' => t('Update Field Forms'),
    'description' => t('Edit the different field forms in the system')
  );

  $perms['delete field forms'] = array(
    'title' => t('Delete Field Forms'),
    'description' => t('Delete the different field forms in the system')
  );

  /* Field Form Results */

  $perms['view any field form results'] = array(
    'title' => t('View Any Field Form Results'),
    'description' => t('View any field form results')
  );

  $perms['print any field form results'] = array(
    'title' => t('Print Any Field Form Results'),
    'description' => t('Print any field form results')
  );

  $perms['delete any field form results'] = array(
    'title' => t('Delete Any Field Form Results'),
    'description' => t('Delete any field form results')
  );

  $perms['view own field form results'] = array(
    'title' => t('View Own Field Form Results'),
    'description' => t('View my field form results')
  );

  $perms['print own field form results'] = array(
    'title' => t('Print Own Field Form Results'),
    'description' => t('Print my field form results')
  );

  $perms['delete own field form results'] = array(
    'title' => t('Delete Own Field Form Results'),
    'description' => t('Delete my field form results')
  );

  return $perms;
}

function fieldform_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer career applications', $account)) {
    return TRUE;
  }

  return user_access($op.' field forms', $account);
}

function fieldform_result_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if ($account->uid === 1 || user_access('administer field forms', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
    case 'print':
    case 'delete':
      return user_access($op.' any field form results', $account) ||
      (user_access($op.' own field form results', $account)
        && $account->uid === $entity->uid) ||
      user_access($op.' any '.$entity->type.' field form results', $account) ||
      (user_access($op.' own '.$entity->type.' field form results', $account)
        && $account->uid === $entity->uid);
      break;
  }

  return FALSE;
}

function fieldform_get_info($elementType = NULL) {
  $static = &drupal_static(__FUNCTION__);

  if (empty($static) || (isset($elementType) && empty($static[$elementType]))) {

    $cache = cache_get('fieldform_info');
    $static = $cache->data;

    if (empty($static) || (!isset($elementType) && empty($static[$elementType]))) {
      $static = array();
      foreach (module_implements('fieldform_info') as $module) {
        $hook = module_invoke($module, 'fieldform_info');
        $static = array_merge_recursive($static,
          array(
            'element class' => 'FieldFormElement',
            'element controller' => 'FieldFormElementController',
            'element ui' => array(
              'full' => array(
                'controller' => 'FieldFormElementUIController',
                'file' => 'fieldform.ui.inc',
                'file path' => drupal_get_path('module', 'fieldform').'/forms'
              )
            ),
            'module' => $module,
            'properties' => array(
              'default_value' => array(
                'title' => t('Default Value'),
                'type' => FIELDFORM_PROPERTY_STRING
              )
            ),
          ),
          $hook);
      }
      drupal_alter('fieldform_info', $static);
    }

    cache_set('fieldform_info', $static);
  }

  if (!isset($elementType)) {
    return $static;
  }
  elseif (isset($elementType) && !empty($static[$elementType])) {
    return $static[$elementType];
  }

  return FALSE;
}

function _fieldform_process_info_files($info = array()) {
  static $files;
  if (empty($info)) {
    return FALSE;
  }

  if (isset($info['file'])) {
    $module = $info['module'];
    $file = $info['file'];
    $file_path = isset($info['file path']) ? $info['file path'] : drupal_get_path('module', $module);
    $path = DRUPAL_ROOT.DIRECTORY_SEPARATOR.$file_path.DIRECTORY_SEPARATOR.$file;
    if (file_exists($path) && !$files[$path]) {
      include_once $path;
      $files[$path] = TRUE;
    }
  }

  return TRUE;
}

function fieldform_element_controller($elementType) {
  $info = fieldform_get_info($elementType);
  _fieldform_process_info_files($info);
  return isset($info['element controller']) &&
  in_array('FieldFormElementController', class_implements($info['element controller'])) ?
    new $info['element controller']($elementType) : new FieldFormElementController($elementType);
}

function fieldform_element_ui_controller($elementType, $view_mode = 'full') {
  $info = fieldform_get_info($elementType);
  _fieldform_process_info_files($info['element ui'][$view_mode]);
  return isset($info['element ui'][$view_mode]['controller']) &&
  in_array('FieldFormElementUIInterface', class_implements($info['element ui'][$view_mode]['controller'])) ?
    new $info['element ui'][$view_mode]['controller']($elementType) : new FieldFormElementUIController($elementType);
}

function element_get_from_elements($key, array &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (array_key_exists($key, $elements)) {
    return $elements[$key];
  }
  else {
    foreach ($elements as &$element) {
      if (($found = element_get_from_elements($key, $element)) !== FALSE) {
        return $found;
      }
    }
  }

  return array();
}

function element_change_name($old_name, $new_name, &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (!empty($elements[$old_name])) {
    $elements[$new_name] = $elements[$old_name];
    unset($elements[$old_name]);
    return TRUE;
  }
  else {
    foreach ($elements as &$element) {
      if(element_change_name($old_name, $new_name, $element) === TRUE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

function elements_add(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element add callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element add callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'addElement')) {
    return $controller->addElement($entity, $element);
  }

  elements_add_element($element, $entity->elements);
  return $entity;
}

function elements_add_element($element, &$elements) {
  if (!is_array($elements) || !isset($element['name'])) {
    drupal_set_message(t('Unable to add nameless element or element to non-array'), 'error');
    return FALSE;
  }

  $name = $element['name'];

  if (!empty($element['parents'])) {
    $parents = implode('][', $element['parents']);
    if (!empty($element[$parents])) {
      $name = $parents.']['.$name;
    }
  }

  $elements[$name] = $element;

  return $elements;
}

function elements_update(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element update callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element update callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'addElement')) {
    return $controller->updateElement($entity, $element);
  }

  $values = get_object_vars($element);

  return element_update_values($element->name, $values, $entity->elements);
}

function element_update_values($key, $values, &$elements) {
  if (!is_array($elements)) {
    return FALSE;
  }

  if (!empty($elements[$key])) {
    foreach($values as $name => $value) {
      $elements[$key][$name] = $value;
    }
    return TRUE;
  }
  else {
    foreach ($elements as &$element) {
      if(element_update_values($key, $values, $element) === TRUE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

function elements_delete(Entity $entity, FieldFormElement $element) {
  $entityInfo = $entity->entityInfo();
  if (isset($entityInfo['element delete callback']) && function_exists($entityInfo['element add callback'])) {
    return call_user_func($entityInfo['element delete callback'], $entity, $element);
  }

  $controller = entity_get_controller($entity->entityType());
  if (method_exists($controller, 'addElement')) {
    return $controller->deleteElement($entity, $element);
  }

  return element_delete($element, $entity->elements);
}

function element_delete($element, &$elements) {
  if (!is_array($elements) || !isset($element['name'])) {
    drupal_set_message(t('Unable to remove nameless element or element from non-array'), 'error');
    return FALSE;
  }

  $name = $element['name'];

  if (!empty($elements[$name])) {
    unset($elements[$name]);
    return TRUE;
  }
  else {
    foreach ($elements as &$children) {
      if(element_delete($element, $children) === TRUE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/* Load Functions */

function fieldform_load($id) {
  $ids = array($id);
  $entities = fieldform_load_multiple($ids);
  return is_array($entities) ? array_shift($entities) : $entities;
}

function fieldform_load_multiple($ids = FALSE) {
  return entity_load('fieldform', $ids);
}

function fieldform_result_load($id) {
  $ids = array($id);
  $entities = fieldform_result_load_multiple($ids);
  return is_array($entities) ? array_shift($entities) : $entities;
}

function fieldform_result_load_multiple($ids = FALSE) {
  return entity_load('fieldform_result', $ids);
}

function fieldform_element_create($elementType, $values = array()) {
  return fieldform_element_controller($elementType)->create($values);
}

function fieldform_element_load($entity, $elementName) {
  $values = element_get_from_elements($elementName, $entity->elements);
  return fieldform_element_create($values['type'], $values);
}

/* Forms */

function fieldform_forms($form_id, $args) {
  $forms = array();
  $info = fieldform_get_info();
  $entityInfo = entity_get_info();

  foreach ($info as $elementType => $element) {
    $forms['fieldform_'.$elementType.'_add_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_edit_form'] = array(
      'callback' => 'fieldform_element_settings_form'
    );

    $forms['fieldform_'.$elementType.'_delete_form'] = array(
      'callback' => 'fieldform_element_delete_form'
    );
  }

  foreach ($entityInfo as $type => $i) {
    $controller = entity_get_controller($type);

    if (method_exists($controller, 'hookForms')) {
      $forms += $controller->hookForms();
    }
  }

  return $forms;
}

function fieldform_element_info() {
  return array(
    'tableset' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_tableset_process'),
      '#pre_render' => array('form_tableset_pre_render'),
      '#header' => array(),
      '#rows' => array(),
      '#attributes' => array(),
      '#caption' => NULL,
      '#title_display' => 'invisible'
    ),
    'namevalue_table' => array(
      '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('form_namevalue_table_process'),
      '#pre_render' => array('form_tableset_pre_render'),
      '#submit' => array('form_namevalue_table_submit'),
      '#option' => array(),
      '#title_display' => 'invisible'
    )
  );
}

function fieldform_view_form($form, &$form_state, $entity_type, Entity $entity) {
  return entity_get_controller($entity_type)::buildForm($entity, $form, $form_state);
}

function fieldform_view_form_validate(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $entity->validate($form, $form_state);
}

function fieldform_view_form_submit(&$form, &$form_state) {
  $entity = $form_state[$form_state['entity_type']];
  $entity->submit($form, $form_state);
}

function fieldform_view_wrapper($form, &$form_state, $entity_type, $entity) {
  $form_id = "fieldform_".$entity->entityType()."_".$entity->identifier()."_form";
  $form_state = array(
    'entity_type' => $entity->entityType(),
    'build_info' => array(
      'args' => array($entity->entityType(), $entity)
    )
  );

  $form_state[$entity_type] = $entity;

  return drupal_retrieve_form($form_id, $form_state);
}

function fieldform_element_operations_form($op = 'add', Entity $entity, FieldFormElement $element = NULL) {
  $form_id = $entity->entityType()."_".$element->elementType()."_{$op}_form";
  $form_state = array(
    'entity_type' => $entity->entityType(),
    'element_type' => $element->elementType(),
    'build_info' => array(
      'args' => array($entity->entityType(), $entity, $element->elementType(), $element, $op)
    )
  );

  if ($op == 'add' || $op == 'edit') {
    $form_state['wrapper_callback'] = 'fieldform_element_settings_defaults';
  }

  return drupal_retrieve_form($form_id, $form_state);
}

function fieldform_element_settings_defaults($form, &$form_state, $entity_type, $entity,
                                             $element_type, FieldFormElement $element, $op = NULL) {
  $defaults = array(
    'entity_type' => $entity_type,
    'element_type' => $element_type
  );

  if (isset($op)) {
    $defaults['op'] = $op;
  }

  $form_state += $defaults;

  // Set page title with callback function here

  // Add in handlers pointing to the controller for the forms implemented by it.
  if (isset($form_state['build_info']['base_form_id']) &&
    $form_state['build_info']['base_form_id'] != $entity_type . '_form') {
    $form['#validate'][] = 'fieldform_element_settings_form_validate';
    $form['#submit'][] = 'fieldform_element_settings_form_submit';
  }
  return $form;

}

function fieldform_element_settings_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element, $op = NULL) {
  $element_controller = fieldform_element_controller($element_type);
  $form = $element_controller->settingsForm($form, $form_state, $element, $op);

  if (empty($form['submit'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#suffix' => l('cancel', check_url($entity->uri().'/elements'))
    );
  }

  return $form;
}

function fieldform_element_settings_form_validate(&$form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $controller = fieldform_element_controller($element_type);
  if (method_exists($controller, 'settingsValidateForm')) {
    $controller->settingsValidateForm($form, $form_state, $entity_type, $entity, $element_type, $element);
  }
}

function fieldform_element_settings_form_submit($form, &$form_state) {
  list($entity_type, $entity, $element_type, $element) = $form_state['build_info']['args'];
  $controller = fieldform_element_controller($element_type);
  $values = $form_state['values'];
  $values['type'] = $element_type;
  $values['attributes'] = fieldform_element_attributes($values['attributes']) + $values['class'];
  unset($values['form_id'], $values['form_build_id'], $values['form_build_token'], $values['op'], $values['class']);
  $name = isset($element->name) ? $element->name : $values['name'];
  $entity_element = element_get_from_elements($name, $entity->elements);
  $entity_element = array_merge_recursive($entity_element, $values);
  $element = fieldform_element_create($element_type, $entity_element);

  if (method_exists($controller, 'settingsSubmitForm')) {
    $controller->settingsSubmitForm($form, $form_state, $entity_type, $entity, $element_type, $element);
  }

  if (!(elements_update($entity, $element))) {
    elements_add($entity, $element);
  }
  elseif ($element->name !== $name) {
    // Name has changed to protect the innocent (not really)
    element_change_name($name, $element->name, $entity->elements);
  }
  entity_save($entity_type, $entity);

  drupal_redirect_form($form_state);
}

function fieldform_element_delete_form($form, &$form_state, $entity_type, Entity $entity,
                                         $element_type, FieldFormElement $element) {
  $question = t('Are you sure you want to delete @name from @entity',
    array('@name' => $element->title, '@entity' => $entity->label()));
  return confirm_form($form, $question, $entity->uri().'/elements', t('Delete'));
}

function fieldform_element_delete_form_submit($form, &$form_state) {
  $entity_type = $form_state['entity_type'];
  $entity = $form_state[$entity_type];
  $element_type = $form_state['element_type'];
  $element = $form_state[$element_type];
  if (elements_delete($entity, $element)) {
    entity_save($entity_type, $entity);
  }
  drupal_redirect_form($form_state);
}

function form_tableset_pre_render($element, &$form_state) {
  foreach($element['#rows'] as &$row) {
    foreach($row as &$col) {
      $col['data'] = drupal_render($col['#data']);
      unset($col['#data']);
      if (!empty($col['#attributes'])) {
        $col += $col['#attributes'];
        unset($col['#attributes']);
      }
    }
  }
  return $element;
}

function form_tableset_process($element, &$form_state, $complete_form) {
  foreach ($element['#rows'] as $key => &$row) {
    if (is_array($row)) {
      foreach ($row as &$col) {
        $default = array('#parents' => array_merge($element['#parents'], array($key)));
        if (!is_array($col)) {
          $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', $col));
          $default['#parents'][] = $name;
          $col['#data']  = array($name => array('#value' => $col)) + $default;
          drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
        }
        else {
          if (!empty($col['data'])) {
            $col['#data'] = $col['data'];
            unset($col['data']);
            if (is_array($col['#data'])) {
              $name = array_keys($col['#data'])[0];
              $default['#parents'][] = $name;
              $col['#data'][$name] += $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
            else {
              $name = strtolower(preg_replace('/[^a-zA-Z0-9]+/', '_', (string)$col['#data']));
              $default['#parents'][] = $name;
              $col['#data'] = array($name => array('#value' => $col['#data'])) +  $default;
              drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$name], $form_state);
            }
          }
          else {
            $col['#data'] = array();
            foreach(element_children($col) as $child) {
              $default['#parents'][] = $child;
              if (is_array($col[$child])) {
                $col['#data'][$child] = $col[$child] + $default;
                unset($col[$child]);
                drupal_process_form($complete_form['form_id']['#value'], $col['#data'][$child], $form_state);
              }
            }
          }
        }
      }
    }
  }

  return $element;
}

function form_namevalue_table_process($element, &$form_state, $complete_form) {
  $options = array_filter($element['#options']);
  $options = !empty($options) ? $options : array(array('name' => ''));
  unset($element['#options']);

  $element['#headers'] = array(
    'ID',
    'Name',
    'Value',
    'Weight'
  );

  $element['#attributes'] = array('id' => 'namevalue_table-'.$element['#name']);

  foreach ($options as $i => $option) {
    foreach ($option as $name => $value) {
      $element['#rows'][$i] = _namevalue_table_blank_row();
      $element['#rows'][$i]['#data']['name']['#default_value'] = $name;
      $element['#rows'][$i]['#data']['value']['#default_value'] = $value;
    }
  }

  $element['actions'] = array(
    '#type' => 'actions'
  );

  $element_id = implode('--', $element['#parents']).'--'.$element['#name'];

  $element['actions']['add_'.$element_id] = array(
    '#type' => 'button',
    '#value' => '+',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'callback' => '_namevalue_table_ajax'
    )
  );

  $element['actions']['remove_'.$element_id] = array(
    '#type' => 'button',
    '#value' => '-',
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'wrapper' => 'namevalue-table-wrapper-'.$element['#name'],
      'callback' => '_namevalue_table_ajax'
    )
  );

  return $element;
}

function _namevalue_table_blank_row() {
  return array(
    '#data' => array(
      'id' => array(
        '#type' => 'hidden',
        '#value' => $i,
        '#attributes' => array(
          'class' => array('namevalue-id')
        )
      ),
      'name' => array(
        '#type' => 'textfield',
        '#title_display' => 'invisible',
      ),
      'value' => array(
        '#type' => 'textfield',
        '#title_display' => 'invisible',
      ),
      'weight' => array(
        '#type' => 'hidden',
        '#value' => $i,
        '#attributes' => array(
          'class' => array('namevalue-weight')
        )
      ),
    ),
    'class' => array('draggable', 'tabledrag-root')
  );
}

function _namevalue_table_ajax($form, $form_state) {
  /*$form_build_id = $_POST['form_build_id'];
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form = form_get_cache($form_build_id, $form_state);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form['#post'] = $_POST;
  $form['#redirect'] = FALSE;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;

  drupal_process_form($form_id, $form, $form_state);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);*/
  $op_button = $form_state['values']['op'];
  $op = preg_match('/^[^_]+', $op_button);
  $element_string = str_replace($op.'_', '', $op_button);
  $element_name = str_replace('-', '][', $element_string);
  $element = $form[$element_name];
  unset($element['actions'], $element['#printed']);

  $i = count($element['#rows']);

  if ($op == 'add') {

  }
  elseif ($op == 'remove') {
    if ($i > 1) {
      --$i;
      unset($element['#rows'][$i]);
    }
    else {
      unset($element['#rows']);
      $element['#rows'][0] = _namevalue_table_blank_row();
    }
  }

  /*foreach (element_children($element) as &$row) {
    foreach ($row['#data'] as &$col) {
      unset($col['#printed']);
      drupal_process_form($form_id, $fieldset, $form_state);
    }
  }*/
  return $element;
  //drupal_json_output(array('success' => TRUE, 'data' => drupal_render($element)));
}

function form_namevalue_table_submit(&$element, &$form_state) {
  $rows = $element['#value'];
  $values = array();
  foreach ($rows as $value) {
    $values[$value['name']] = $value['value'];
  }

  $element['#value'] = $values;
}

/* Helpers */

function fieldform_element_attributes_to_string($attributes = array()) {
  if (empty($attributes)) {
    return NULL;
  }
  unset($attributes['class']); // Class is special

  $output = '';
  foreach ($attributes as $name => $value) {
    if (is_array($value)) {
      $value = implode(' ', $value);
    }
    $output .= vsprintf("%s|%s", $name, $value).PHP_EOL;
  }
  return $output;
}

function fieldform_element_attributes($attributes) {
  if (!($attrs = explode(PHP_EOL, $attributes))) {
    $attrs = array($attributes);
  }

  $ret = array();
  foreach ($attrs as $line) {
    if (($vals = explode('|', $line)) !== FALSE) {
      $ret[$vals[0]] = $vals[1];
    }
  }
  return $ret;
}

/* Theme */

function fieldform_theme() {
  $themes = array();

  $themes['fieldform_elements_list'] = array(
    'render element' => 'form'
  );

  $themes['tableset'] = array(
    'render element' => 'element'
  );

  $themes['namevalue_table'] = array(
    'render element' => 'element'
  );

  return $themes;
}

function theme_fieldform_elements_list($variables) {
  $form = $variables['form'];
  $header = array(
    'Title',
    'Name',
    'Type',
    'Id',
    'Parents',
    'Weight',
    array(
      'data' => 'Operations',
      'colspan' => 2,
    )
  );

  $rows = array();

  foreach($form['elements'] as $name => $element) {
    $class = array('draggable');
    if (!empty($element['parents'])) {
      $class[] = 'tabledrag-leaf';
      $indent = theme('indentation', array('size' => count($element['parents']) - 1));
    }
    else {
      $class[] = 'tabledrag-root';
      $indent = theme('indentation', array('size' => 0));
    }

    if ($name !== 'add_new_element') {
      $element['id']['#attributes']['class'] = array('elements-list-id');
      $element['weight']['#attributes']['class'] = array('elements-list-weight');
      $element['parents']['#attributes']['class'] = array('elements-list-parents');

      $rows[] = array(
        'data' => array(
          $indent.drupal_render($element['title']),
          drupal_render($element['name']),
          drupal_render($element['type']),
          drupal_render($element['id']),
          drupal_render($element['parents']),
          drupal_render($element['weight']),
          drupal_render($element['edit']),
          drupal_render($element['delete'])
        ),
        'class' => $class
      );
    }
  }

  $form['elements']['add_new_element']['id']['#attributes']['class'] = array('elements-list-id');
  $form['elements']['add_new_element']['weight']['#attributes']['class'] = array('elements-list-weight');
  $form['elements']['add_new_element']['parents']['#attributes']['class'] = array('elements-list-parents');

  $rows[] = array(
    'data' => array(
      drupal_render($form['elements']['add_new_element']['title']),
      drupal_render($form['elements']['add_new_element']['name']),
      drupal_render($form['elements']['add_new_element']['type']),
      drupal_render($form['elements']['add_new_element']['id']),
      drupal_render($form['elements']['add_new_element']['parents']),
      array('data' => drupal_render($form['elements']['add_new_element']['weight']),
        'colspan' => 3)
    ),
    'class' => array('draggable', 'tabledrag-root')
  );

  $table_id = 'elements_list_table';
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag($table_id, 'match', 'parent', 'elements-list-parents', 'elements-list-parents',
    'elements-list-id', FALSE);

  // Because we also want to sort in addition to providing parenting, we call
  // the drupal_add_tabledrag function again, instructing it to update the
  // weight field as items at the same level are re-ordered.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'elements-list-weight', NULL, NULL, FALSE);

  return $output;
}

function theme_tableset($variables) {
  $element = $variables['element'];
  $output = theme('table', array(
    'header' => $element['#header'],
    'rows' => $element['#rows'],
    'attributes' => $element['#attributes'],
    'caption' => $element['#caption']
    )
  );
  return theme('form_element', $element, $output);
}

function theme_namevalue_table($variables) {
  $element = $variables['element'];
  $actions = $element['actions'];
  $output = '<div id="namevalue-table-wrapper-'.$element['#name'].'">';
  $output .= theme('table', array(
      'header' => $element['#header'],
      'rows' => $element['#rows'],
      'attributes' => $element['#attributes'],
      'caption' => $element['#caption']
    )
  );
  $output .= '</div>';
  $output .= drupal_render($actions);

  drupal_add_tabledrag($element['#attributes']['id'], 'order', 'sibling', 'namevalue-weight', NULL, NULL);

  return $output;
}